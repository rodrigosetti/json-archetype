/**
 * JSON archetype language is a superset of JSON, and can accept C-style
 * comments (block or line) to help documenting your test.
 */

/* one case assign sub-structes to names, and use them later in the main
   validation structure to reuse parts. This is also an example of a
   non-trivial use of a regular expression to validate an IP address. */
ip_address =  "[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}"
server = { "ip": ip_address,
           "port": 8080,
           "protocol": "http"}

{
    "name": string,
    "version": 2,
    "data(-.*)?": object,  // this key is a regular expression
    "is_member" : boolean, // true or false (type restriction)
    "is_active" : true,    // only true (value restriction)
    "coordinates": ["geo", number, number, number], // any array with "geo" and 3 numbers
    "stream": array,

    // reusing pre-defined structures...
    "prod_server" : server,
    "stage_server": server,
    "dev_server"  : server,

    "extra": any // accepts any value here. the key "extra" must exist.
}

